package auth

import (
	"encoding/json"
	"net/http/httptest"
	"strings"
	"testing"

	"github.com/labstack/echo/v4"
)

func TestFetchCertAuth(t *testing.T) {

	kubeSpec := &CertKubeAuth{}

	mockConnectRequet := "LS0tLS1CRUdJTiBDRVJUSUZJQ0FURS0tLS0tCk1JSURBRENDQWVpZ0F3SUJBZ0lCQWpBTkJna3Foa2lHOXcwQkFRc0ZBREFWTVJNd0VRWURWUVFERXdwdGFXNXAKYTNWaVpVTkJNQjRYRFRFNE1UQXhNakUyTlRnMU1Wb1hEVEU1TVRBeE16RTJOVGcxTVZvd01URVhNQlVHQTFVRQpDaE1PYzNsemRHVnRPbTFoYzNSbGNuTXhGakFVQmdOVkJBTVREVzFwYm1scmRXSmxMWFZ6WlhJd2dnRWlNQTBHCkNTcUdTSWIzRFFFQkFRVUFBNElCRHdBd2dnRUtBb0lCQVFEeFNtT2dORmV5VjkyRE5Sa0RmNVNSZlk5WHhGRVkKbFF2Z3lEcmFnVVpCcXFTaFBaZGdFdnBFWlVObkVoa1ZaYnc5WGUxelFMdVFuZnJEaERzOHlqTk8xWTV4ZUt2cwpIQlVBZEsxa2FQMlBXMVhSN3hxREh2SFdhQ3dRWVdHK1Bsa0NXMzg1YzBsNktXRUc5SVlFWFdkT1VDbEZuT3ZoCnJBN2RTNWR5eFViU3FCd0RSSDljMlhDVjQ4c1dLZnJhdmQvMTg5bWJENStQRk9ZditnRFFycHBTYnUzQytjTmYKbC93NDl0L0NQWlQ4bHFWU2FBUHhzOXFKbStKSFVFWHk3a1p2bGRZbG83NjJ3V1B6c0JoaXNkNU5ua2hmbGhrUApKSWNrWjN5eWF5bkdkOWJlKzdva2hwVEt1STNReGh5MTBrMWsxc1dyYmJTWVJDbmQ1akdVN3N2REFnTUJBQUdqClB6QTlNQTRHQTFVZER3RUIvd1FFQXdJRm9EQWRCZ05WSFNVRUZqQVVCZ2dyQmdFRkJRY0RBUVlJS3dZQkJRVUgKQXdJd0RBWURWUjBUQVFIL0JBSXdBREFOQmdrcWhraUc5dzBCQVFzRkFBT0NBUUVBQ2NNS2IreVNOeG9wYmRGNwpqcTBTN1EvQmFUbWhzWnVUWDRPL2V4ZllkZFpwK0didDc2VEVqYWdmUmQvbXFFazlheFAxWDVzWkRhQ283blkzCitDdnpMb1h2Y3NHdnVnRTJSWStsSjdBbTdLS0lTdGVGTFdsRnBDTXJBWXF6TG1Wb3NyeDlWM0ZTbWY2REdWRk4KSmVVVFBnYTFrNTltMUNFSjZDYTAzM2hEYmp6aWsxd0xtR3pLVmRDR29HT1N0Vm1tbTZFWWMza1hheGVXTUtuMQpoRDhmREV5R3p1Z2hhTkQyYjZGdnlha28yUVQ3dFd3L09yMXNhQWQ1S2N5Wk4xdDVtUHI1RHh0SmFKNHN2dzh4Ck01R0MySFVUM2pzK3dQdDVSUlpSRXd2MkNCUVNHUWtxcDFrWTNLV1pXTDB2WEQvbjJqYlZGUUtacHQ2dDZKT3EKaVQ2bnlRPT0KLS0tLS1FTkQgQ0VSVElGSUNBVEUtLS0tLQo=:LS0tLS1CRUdJTiBSU0EgUFJJVkFURSBLRVktLS0tLQpNSUlFcFFJQkFBS0NBUUVBOFVwam9EUlhzbGZkZ3pVWkEzK1VrWDJQVjhSUkdKVUw0TWc2Mm9GR1FhcWtvVDJYCllCTDZSR1ZEWnhJWkZXVzhQVjN0YzBDN2tKMzZ3NFE3UE1velR0V09jWGlyN0J3VkFIU3RaR2o5ajF0VjBlOGEKZ3g3eDFtZ3NFR0Zodmo1WkFsdC9PWE5KZWlsaEJ2U0dCRjFuVGxBcFJaenI0YXdPM1V1WGNzVkcwcWdjQTBSLwpYTmx3bGVQTEZpbjYycjNmOWZQWm13K2ZqeFRtTC9vQTBLNmFVbTd0d3ZuRFg1ZjhPUGJmd2oyVS9KYWxVbWdECjhiUGFpWnZpUjFCRjh1NUdiNVhXSmFPK3RzRmo4N0FZWXJIZVRaNUlYNVlaRHlTSEpHZDhzbXNweG5mVzN2dTYKSklhVXlyaU4wTVljdGRKTlpOYkZxMjIwbUVRcDNlWXhsTzdMd3dJREFRQUJBb0lCQVFESEVJd291NFl1U0hjagpyRWE2c0NLdDlWeXhGL0dmeWpkR2QycTJvamlJTEhRdDRsWmttTU9JY2RLdDBpeUhqcXRDSlora21oOGtMSEdaCnBCb0xDUFpUYjdSWXdTbDFYYVdsL3B5ZVhrL3lXWFB3QXNkb3JicnZISHBkK1RsZWJxbVlYRXdWNVpzVkFkWmUKbXBXR1BGamlMeGdkcWx5Z2pnYWxZNXZLd0I2eDR3MHZTczdaUVBoQkFqTSs3a2Q3ZUpBRUJHZUxRL1lRTEIvVgo1Qmtrci9mT2d6K1A3V2t5QUovRk1iRzY4K0E3Z1FHeTJvWGdnbHVsOXg5YjlkcXJDSm5NVHFkNENvbU5qTmFjCkpValhjMEVGeFJqTjdOR0djenhXREVnc1dicGMxeFpYK20zcEQrQnRDd3BSeXJ4Q3NDWGwrTllnT01Jb1FZaWIKaUxQZzhsM0JBb0dCQVBQa3BMdTM0U1NhQVJNOE1YMWxCckdMa0k2cjlLZW5MaVZNYU55bG9CMWtyM29DaEJueApiek5kMkdxaXNBbEJFb3JVWEdkOVBadVNqYmRGMnVxTGgvdVMvdlBBMUpmR3drakZERmNyTVlXeDExWGVMcy9RCmYrdjF2dmQ5RUp5b0w2ekIxQkhaelZuenFIQ2w4OWlvNEY3Wkl3MmlKQ0NjWlJiN2JlOUdzbkdiQW9HQkFQMUUKckR3bldQNG5XN00wdlJYcFVkY3Q1UE96dHZIVFpoNTFJaC93NklOQzladXl3eFJoMi9XTEs0ZlZBRDYxeFloTgpVR0FvU2FUQzRrZWdoYlUvTWY5aWtBS3c3MWRPdk5HSzBSdjROTlZwbEJWbFhhcnF5OEpTeGJIcnNNU25rSTI4CjhNZ21YdlYvNkYwZTUxWFl1bHlYUXNqVWpCbVRXUTUzZnRWcXRhVDVBb0dCQU9vRkpod0pJRHNpbW8xK1lHNVYKbGNxZWhDS2gxS3RadXVtSEc4YzhGUnFmRmRFWXdQQ3p2V09vVkpSZGJsUXk0RHZkOEp4TWkrVFBCclFvanhvbQpzR0F3ZC9vanVObTVtWXFCcUltcnBHVUljL3FzcW5ZMU5jbVBqNkdobTJMMTdtanh3eTh0c2VEeDcxbkhvdWJ0CmcveitsS2ZzUUlZYUN0VzJnNUhvWUNpcEFvR0JBTTNtcHAvQTNYakNScXJLbFc3YTRNNHZZWk0rNTl4eUlQTmkKQnZ3d3Z0YjMrUFU3djUweWNjQ09CRFhKMVFrbWZoRHh5Z1ppdW54WWM5NEhncXgzVkE1cjh1ZzlNRmVxaTVkUApZL0Y1T0hySCtydnFUTnhIUnFBVTZ1UmEyTHNILzEwNzNnVGFMUmtwZzU4eElLR0tNUGhWZ05ZRTltRlVpWEpaCmM2UE52UjhCQW9HQU0zNTlZSUNUalNNYlYvSjJUbUx1Zjh2ejh0WVJDeXlla0h6Z2tTcmpqWUZWNmoxUTllWGQKa1ZFWitaYW1xYkZvUmxqK1lHS21XQ0w0OXJTWkYxNmVYL1V3OW5haEErcmtYL21aaERkOXIrVE90enpycUVYSQpUQVlld3R5ZGEzUzkyaytOWU8zZE5kbWZLQVdYV2JzdjZUKzBBTXR6VTFkMlNaaDlsTU5aVkUwPQotLS0tLUVORCBSU0EgUFJJVkFURSBLRVktLS0tLQo="
	e := echo.New()
	req := httptest.NewRequest(echo.POST, "/pp/v1/auth/login/cnsi?cert=&certKey=&cnsi_guid=testGuid&connect_type=kube-cert-auth&system_shared=false", strings.NewReader(mockConnectRequet))

	engineReq := req
	rec := httptest.NewRecorder()
	res := echo.NewResponse(rec, e)
	c := e.NewContext(engineReq, res)

	kubeCertAuth, err := kubeSpec.extractCerts(c)
	if err != nil {
		t.Fail()
	}

	if kubeCertAuth.Certificate == "" {
		t.Fail()
	}

	if kubeCertAuth.CertificateKey == "" {
		t.Fail()
	}

	jsonString, err := kubeCertAuth.GetJSON()

	if err != nil {
		t.Fail()
	}

	testKubeCertAuth := &KubeCertificate{}
	err = json.NewDecoder(strings.NewReader(jsonString)).Decode(testKubeCertAuth)
	if err != nil {
		t.Fail()
	}
	if testKubeCertAuth.Certificate != kubeCertAuth.Certificate {
		t.Fail()
	}
	if testKubeCertAuth.CertificateKey != kubeCertAuth.CertificateKey {
		t.Fail()
	}
}
